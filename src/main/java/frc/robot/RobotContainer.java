// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.Constants.OIConstants;
import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command.InterruptionBehavior;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.RunCommand;
import edu.wpi.first.math.MathUtil;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
  // The robot's subsystems
  private final Gripper m_gripper = new Gripper();
  private final Elbow m_elbow = new Elbow();
  private final Elevator m_elevator = new Elevator();
  //private final Drivetrain m_drivetrain = new Drivetrain();
  private final SwerveSubsystem m_SwerveDrive = new SwerveSubsystem();

  // Controllers
  private final Joystick joystick = new Joystick(0);
  private final XboxController xboxController = new XboxController(0);
  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
  
  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  private RobotContainer() {
      // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
      // Smartdashboard Subsystems
      // SmartDashboard Buttons
      SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
      SmartDashboard.putData("Gripper forward", new Gripperforward( m_gripper ));
      SmartDashboard.putData("Gripper reverse", new Gripperreverse( m_gripper ));
      SmartDashboard.putData("Elevator Up", new ElevatorUp( m_elevator ));
      SmartDashboard.putData("Elevator Down", new ElevatorDown( m_elevator ));
      SmartDashboard.putData("Elbow 10OC", new Elbow10OC( m_elbow ));
      SmartDashboard.putData("Elbow 12OC", new Elbow12OC());
      SmartDashboard.putData("Elbow 4OC", new Elbow4OC());
      // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD

      // Configure the button bindings
      configureButtonBindings();

      // Configure default commands
      // TODO: pick an option
      // Option 1: XBox Controller
      // m_SwerveDrive.setDefaultCommand(
      //   new RunCommand(
      //     () -> m_SwerveDrive.drive(
      //       -MathUtil.applyDeadband(xboxController.getLeftY(), OIConstants.kDeadband),   //Left Y
      //       -MathUtil.applyDeadband(xboxController.getLeftX(), OIConstants.kDeadband),   //Left X
      //       -MathUtil.applyDeadband(xboxController.getRightX(), OIConstants.kDeadband), //Right X
      //       true),
      //     m_SwerveDrive)
      // );

      // Option 2: Joystick
      // Need to implement command. See 2024 code/commands
      // m_SwerveDrive.setDefaultCommand(
      //   new RunCommand(
      //     () -> m_SwerveDrive.drive(
      //       0, 
      //       0, 
      //       0, 
      //       false)
      //   )
      // );

      // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND
      // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

      // Configure autonomous sendable chooser
      // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
      m_chooser.setDefaultOption("Autonomous Command", new AutonomousCommand());
      // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

      SmartDashboard.putData("Auto Mode", m_chooser);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
    // Create some buttons
    final JoystickButton button4 = new JoystickButton(joystick, 1);        
    button4.onTrue(new Gripperreverse( m_gripper ).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                            
    final JoystickButton button3 = new JoystickButton(joystick, 1);        
    button3.onTrue(new Gripperforward( m_gripper ).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                            
    final JoystickButton button2 = new JoystickButton(joystick, 1);        
    button2.onTrue(new ElevatorDown( m_elevator ).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                            
    final JoystickButton button1 = new JoystickButton(joystick, 1);        
    button1.onTrue(new ElevatorUp( m_elevator ).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
  }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick() {
        return joystick;
    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }
}