// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: PIDSubsystem.

package frc.robot.subsystems;

import frc.robot.commands.*;
import edu.wpi.first.wpilibj2.command.PIDSubsystem;
import edu.wpi.first.math.controller.PIDController;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.math.MathUtil;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.math.controller.PIDController;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.motorcontrol.PWMVictorSPX;
import edu.wpi.first.wpilibj.smartdashboard.*;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Drivetrain extends PIDSubsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private PWMVictorSPX motorController1;private AnalogPotentiometer analogPotentiometer1;private PIDController motorFL;private AnalogPotentiometer analogPotentiometer2;private PWMVictorSPX motorController2;private PIDController motorFR;private AnalogPotentiometer analogPotentiometer3;private PWMVictorSPX motorController3;private PIDController motorRL;private AnalogPotentiometer analogPotentiometer4;private PWMVictorSPX motorController4;private PIDController motorRR;
    //P I D Variables
    private static final double kP = 1.0;
    private static final double kI = 0.0;
    private static final double kD = 0.0;
    private static final double kF = 0.0;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Initialize your subsystem here
    public Drivetrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super(new PIDController(kP, kI, kD));
        getController().setTolerance(0.2);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
motorController1 = new PWMVictorSPX(0);
 addChild("Motor Controller 1",motorController1);
 motorController1.setInverted(false);

analogPotentiometer1 = new AnalogPotentiometer(3, 1.0, 0.0);
 addChild("Analog Potentiometer 1", analogPotentiometer1);
 

motorFL = new PIDController(1.0, 0.0, 0.0, 0.02);
 addChild("Motor FL",motorFL);
 motorFL.setTolerance(0.2);



analogPotentiometer2 = new AnalogPotentiometer(4, 1.0, 0.0);
 addChild("Analog Potentiometer 2", analogPotentiometer2);
 

motorController2 = new PWMVictorSPX(1);
 addChild("Motor Controller 2",motorController2);
 motorController2.setInverted(false);

motorFR = new PIDController(1.0, 0.0, 0.0, 0.02);
 addChild("Motor FR",motorFR);
 motorFR.setTolerance(0.2);



analogPotentiometer3 = new AnalogPotentiometer(5, 1.0, 0.0);
 addChild("Analog Potentiometer 3", analogPotentiometer3);
 

motorController3 = new PWMVictorSPX(2);
 addChild("Motor Controller 3",motorController3);
 motorController3.setInverted(false);

motorRL = new PIDController(1.0, 0.0, 0.0, 0.02);
 addChild("Motor RL",motorRL);
 motorRL.setTolerance(0.2);



analogPotentiometer4 = new AnalogPotentiometer(6, 1.0, 0.0);
 addChild("Analog Potentiometer 4", analogPotentiometer4);
 

motorController4 = new PWMVictorSPX(3);
 addChild("Motor Controller 4",motorController4);
 motorController4.setInverted(false);

motorRR = new PIDController(1.0, 0.0, 0.0, 0.02);
 addChild("Motor RR",motorRR);
 motorRR.setTolerance(0.2);




        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        super.periodic();

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    @Override
    public double getMeasurement() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return analogPotentiometer1.get();

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    }

    @Override
    public void useOutput(double output, double setpoint) {
        output += setpoint*kF;
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
motorController1.set(output);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

}
